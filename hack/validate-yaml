#!/bin/bash
set -eou pipefail

function main(){
    ## validation: Benchmarks (cfgs) with yamllint and kube-bench (dry-run) 
    echo "Running: yamllint against security-scan cfgs"

    # CFGS lists all benchmark directories such as cis-1.7
    CFGS="$(find package/cfg/ -mindepth 1 -type d -printf "%f\n")"

    FAILED_CFGS_YML=()
    FAILED_CFGS_KB=()

    # Loop through all benchmarks
    for cfg in ${CFGS}; do
    set -x
        # yammlint is configured with ../.yamllint.yaml, to catch any liniting errors for a given benchmark. If result isn't empty, FAILED_CFGS_YML is appended with the failing benchmark.
        if [ -n "$(yamllint -s package/cfg/$cfg)" ]; then
            FAILED_CFGS_YML+=("package/cfg/$cfg")
        fi
        # kube-bench dry-run to detect any errors for a given benchmark's files - check 1.1 is common to all benchmarks and used to speed up the test. If kube-bench commands fails, FAILED_CFGS_KB is appended with the failing benchmark.
        if kube-bench --config-dir package/cfg --config package/cfg/config.yaml --benchmark "$cfg" --check 1.1 --noremediations --noresults --nosummary --nototals; then
        echo "$cfg is OK"
        else
            FAILED_CFGS_KB+=("$cfg")
        fi
    set +x
    done

    # Test if any profiles have errors, either FAILED_CFGS_YML or FAILED_CFGS_KB is greater than 0, fails. 
    if [ ${#FAILED_CFGS_YML[@]} -gt 0 ]; then
        echo "Error - yamllint failed for these cfgs: ${FAILED_CFGS_YML[@]}"
        exit 1
    fi
    if [ ${#FAILED_CFGS_KB[@]} -gt 0 ]; then
        echo "Error - kube-bench dry-run failed for these cfgs: ${FAILED_CFGS_KB[@]}"
        exit 1
    fi
}

main
